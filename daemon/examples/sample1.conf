#(pf (version 1.0))
(config
 # tâches légères
 (taskgroup appli.poll(label Les polling de mon appli))
 (task get1(taskgroup appli.poll)
  (mean http)(command /foo/)(target localhost)
  (maxinstances 1) # en fait c'est la valeur par défaut
  (param method get)
  (trigger
   (cron /30 * * * * *) # toutes les 30 secondes
   (misfire forget) # en fait c'est la valeur par défaut
  )
 )

 # batches lourds
 (taskgroup appli.batch(label Les batches lourds de mon appli)
  (param z %%2) # sera récupéré par batch1
 )
 (task batch1(taskgroup appli.batch)
  (info (test) http://qron.eu/        xxx         )
  (mean ssh)(command "/opt/foo.sh $z %z %{=date:yyyy} %{z} %{=date:dd} %!x percent:%%")
  (target back)
  (resource memory 512)
  (trigger
   (cron 0 0 1/2 * * *) # les heures impaires
  )
  (trigger
   (cron /5 */2,3,5,7/13 2 * /10 */5,*/3)
  )
  (trigger
   (cron /5 */2,3,5,7/13 22 * /10 */5,*/3)
  )
  (trigger
   (cron /10 15 6 31 */2 2,3)
  )
 )
 (task batch2(taskgroup appli.batch)(mean ssh)(command /opt/bar.sh)
  (label second batch)
  (target back)
  (resource memory 768)
  (trigger(notice gobatch2)(misfire runone))
  (trigger
   (cron 0 0 22 * * *) # à 22h en + de l'évenementiel
   (enabled false) # mais en fait non...
  )
 )
 (task batch3(taskgroup appli.batch)(mean local)
  #(command /tmp/foo)
  #(disabled)
  (command cat /etc/hosts)
  (target localhost)
  (trigger(cron 2/10 * * * * *))
  (param FOO BAR)
  (resource memory 103)
 )
 (task batch4(taskgroup appli.batch)(mean ssh)
  (target localhost)
  #(command cat /etc/hosts)
  (command /tmp/foo "$z %z %{=date:yyyy} %{z} %{=date:dd} %y %{=sub:%z:/2/3} %{=sub:%y:/2/3} %{=sub|%{=sub:%z:/2/3}|/3/4}" %!x %undef "aaa\\ b\x62b" 'aa\ bb' a b a% b "a b" "'a b'" "%{=switch:a b}")
  (param y %z)
  (trigger(cron 1/10 * * * * *))
  (resource memory 104)
  (param tag batch4)
 )
 (task batch5(taskgroup appli.batch)
  (mean ssh)
  (target localhost)
  # example of shell script command (runs with remote user's default shell)
  (command '
set -C
set -e
set -o pipefail
RC=0
echo foobar $SSH_CLIENT $$ $LOGNAME >&2
exit $RC
')
    (trigger(cron 1/10 * * * * *))
 )
 (task batch6(taskgroup appli.batch)
  (mean ssh)
  (target localhost)
  # example of shell script command, forcing remote shell to /bin/sh
  (param command.shell /bin/sh)
  (command '
set -C
set -e
RC=0
echo foobar $SSH_CLIENT $$ $LOGNAME >&2
exit $RC
')
    (trigger(cron 1/10 * * * * *))
 )
 (task batch7(taskgroup appli.batch)
  (mean local)
  # example of shell script command (runs with local user's default shell,
  # i.e. $SHELL if set or /bin/sh otherwise)
  (command '
set -C
set -e
set -o pipefail
RC=0
echo foobar $SSH_CLIENT $$ $LOGNAME >&2
exit $RC
')
    (trigger(cron 1/10 * * * * *))
 )
 (task batch8(taskgroup appli.batch)
  (mean local)
  # example of shell script command, forcing local shell to /bin/sh
  (param command.shell /bin/sh)
  (command '
set -C
set -e
RC=0
echo foobar $SSH_CLIENT $$ $LOGNAME >&2
exit $RC
')
    (trigger(cron 1/10 * * * * *))
 )


 # infra
 (host localhost
    (hostname localhost # note that hostname defaults to host id, i.e. localhost
    )
    (resource memory 128 # resource 'memory' is defined for this host with an available amount of 128
    )
    # you must define a localhost host if you don't want to get into troubles
 )
 (host back1(hostname localhost)(resource memory 1024))
 (host back2(hostname localhost)(resource memory 1024))
 (host back3(hostname localhost)(resource memory 1024))
 (cluster # a cluster is a collection of host available as a single target
    back(hosts back1 back2 back3)
    (balancing roundrobin)
 )

 # log
 (log(level debug)(file "/tmp/qron-debug-%{=date:yyyyMMdd}.log")(unbuffered))
 (log(level info)(file "/tmp/qron-%{=date:yyyyMMdd}.log")(unbuffered))

 # global section
 (param globalparam foo)
 (maxtotaltaskinstances 8)
 (unsetenv LS_COLORS TERMCAP)
)
