#(pf (version 1.0))
(config
 (param globalparam1 foobar)
 (param return.code.401.label unauthorized)
 (param return.code.127.label "cannot exec")
 (param webconsole.showaudituser.regexp "^user")
 (param webconsole.test.text "%{=random}")
 #(param stderrfilter "^Warning: Permanently added .* to the list of known hosts.$")
 (setenv a.b.c.d "%{=date:yyyy}")
 (unsetenv LS_COLORS LD_LIB*)

 # tasks
 (taskgroup app1.batch
  (setenv ::FOOBAR+ %!taskid)
  (unsetenv DISPLAY)
 )
 (task batch3(taskgroup app1.batch)(mean local)
  (command /bin/false)
  (target localhost)
  (unsetenv *)
  (trigger(cron 2/10 * * * * *))
  (resource memory 103)
  (maxexpectedduration 2)
  (minexpectedduration 6)
  (onstart(emitalert outofwindow.emit)(raisealert outofwindow.raise)(raisealert outofwindow.5am))
 )
 (task batch4(taskgroup app1.batch)(mean ssh)(target localhost)
  # comment 1
  (command "/tmp/foo %{=date:yyyy}")
  (param foo2 bar2)
  (param return.code.42.success true)
  (param disable.alert.stderr true)
  (setenv BARFOO)
  (setenv FOOBAR ::%!taskid:4)
  (setenv foo2)
  # comment 2
  #
  (unsetenv SSH_*)
  (trigger(cron 1/10 * * * * *))
  (resource memory 104)
  #(param stderrfilter ".*")
  (maxdurationbeforeabort 12)
 )
 (task sleep1(taskgroup app1.batch)(mean local)
  (command sleep 300)
  (trigger(cron 0 * * * * *))
  (maxexpectedduration 30)
 )
 (task each1(taskgroup app1.batch)(mean ssh)
  (command sleep 3)
  (target cluster-each)
  (trigger(cron 3/10 * * * * *))
  (maxexpectedduration 4)
 )
 (task each2(taskgroup app1.batch)(mean ssh)
  (command sleep 3)
  (target cluster-each)
  (trigger(cron 3 * * * * *))
  (maxexpectedduration 4)
 )
 (task emitter(taskgroup app1.batch)(mean donothing)
  (trigger(cron * * * * * *))
  (onstart(emitalert emit.1))
 )
 (taskgroup app1.polling)
 (task poll1(taskgroup app1.polling)(mean http)
  (command /console/index.html?taskinstanceid=%!taskinstanceid)
  (target localhost)
  (trigger(cron 3/10 * * * * *))
  #(param method put)
  (param port 8086)
  (minexpectedduration 2.5)
 )

 # infrastructure
 (host localhost(hostname localhost)(resource memory 128))
 (host server1(hostname server1)(resource memory 1024))
 (host server2(hostname server1)(resource memory 1024))
 (host server3(hostname server1)(resource memory 4096))
 (cluster cluster-back
   (hosts server1 server2 server3 server4)
   (balancing first)
 )
 (cluster cluster-each
   (hosts server1 server2)
   (balancing each)
 )

 # alerts
 (alerts
  # here come alerter configuration
  (settings
    # overriding default settings for a given alert id pattern
    (pattern 'task.failure.app1.batch.batch4' # i.e. on batch4 failure
    )
    (risedelay 10)
    (dropdelay 90)
  )
  (settings
    (pattern config.**)
    (duplicateemitdelay 5)
  )
  (settings
    (pattern outofwindow.5am)
    (visibilitywindow * * 5 * * *)
  )
  (settings
    (pattern outofwindow.b**)
    (acceptabilitywindow * /2 * * * *)
  )
  (settings
    (pattern outofwindow.**)
    (visibilitywindow * /2 * * * *)
  )
  (settings
    # set a visibiility window which matches nothing
    # currently it is ignored (= like if no window was declared) but later
    # it may mean that the alert is never visible, although another parameter
    # should be easier to understand (e.g. a "(nevervisible)" flag)
    (pattern nothing.matches.that)
    (visibilitywindow * * * 30 2 *)
    #(visibilitywindow , , , , , ,)
  )
  (subscription(pattern task.failure.app1.batch.*) # task.failure.%!taskid
        (mail(address gb@localhost))
   )
  (subscription(pattern emit.1)
        (mail(address gb@localhost))
   )
  (subscription(pattern outofwindow.**)
        (mail(address gb@localhost))
   )
  (subscription(pattern task.failure.app1.batch.*)
        (mail
          (address root@localhost)
          (nocancelnotify)
          (noremindernotify)
        )
   )
  (subscription(pattern config.**)
       (mail(address gb@localhost, root@localhost))
  )
  (subscription(pattern '/confi[gG].*/')
       (log)
  )
  (subscription(pattern config.**)
       (stop)
  )
   (subscription(pattern task.failure.app1.batch.*) # task.failure.%!taskid
        (url(address udp://127.0.0.1:4242)
            (emitmessage task failure: %!alertid)
            (cancelmessage task back to success: %!alertid)
            (remindermessage task still failed: %!alertid))
        (mail(address nobody@localhost) # this is an error 
        )
        (stop # do not process next subscriptions if this one matches
        )
   )
   (subscription(pattern resource.exhausted.**) # resource.exhausted.%!kind.%!target
        (mail
          (address gb@localhost)
          (nocancelnotify) # do not send messages when alerts are canceled
        )
   )
   (subscription(log(address debug)) # match every alert (but those stopped before)
        (url(address udp://localhost:4243)(param foo baz))
        (param foo bar)
   )
   (mindelaybetweensend 60)
   (dropdelay 90)
   (risedelay 60)
   (mayrisedelay 20 # active only when less than risedelay, should be c. 25%-50% risedelay to hide false positive alerts
   )
   (remindperiod 60 # 1 min
   )
   (delaybeforefirstsend 30)
   (duplicateemitdelay 20)
   (param webconsoleurl http://qron.myurl.com/console/alerts.html # this link will be visible in alert e-mails
   )
   (param mail.alertstyle "background:black;color:white;")
   (param mail.alertsubject.gb@localhost "CUSTOM ALERT SUBJECT")
 )

 # events
 (onconfigload
    (log(severity fatal) config reloaded!)
    (emitalert config.reload)
 )

 # log
 #(log(level debug)(file "/tmp/qron-debug-%{=date:yyyyMMdd-hhmmss}.log"))
 (log(level debug)(file "/tmp/qron-debug-%{=date:yyyyMMdd}.log"))
 (log(level info)(file "/tmp/qron-%{=date:yyyyMMdd}.log")(unbuffered))

 (access-control # ui & api access control
   (user-file examples/users (cipher sha1))
   (user-file /do/not/exist)
   (user-file examples/users2 (cipher ldap))
   (user user1 (password pass1) # cleartext password are bad (except for testing)
   )
   (user user2 (password 8be52126a6fde450a7162a3651d589bb51e9579d)(cipher sha1)(roles read) # password: pass2
   )
   (user user3 (password 3afc79b597f88a72528e864cf81856d2)(cipher md5hex)(roles read operate) # password: pass3
   )
 )
)
