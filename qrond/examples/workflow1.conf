#(pf (version 1.0))
(config
 # tâches légères
 (taskgroup appli.poll(label Les polling de mon appli))
 (task get1(taskgroup appli.poll)
  (mean http)(command /foo/)(target localhost)
  (maxinstances 1) # en fait c'est la valeur par défaut
  (param method get)
  (trigger
   (cron /30 * * * * *) # toutes les 30 secondes
  )
 )

 # batches lourds
 (taskgroup appli.batch(label Les batches lourds de mon appli)
  (param z 2) # sera récupéré par batch1
 )
 (task batch1(taskgroup appli.batch)
  (info http://qron.eu/)
  (mean ssh)(command "/opt/foo.sh $z %z %{=date:yyyy} %{z} %{=date:dd} %!x")
  (target back)
  (resource memory 512)
  (trigger
   (cron 0 0 1/2 * * *) # les heures impaires
  )
  #(trigger
  # (cron /5 */2,3,5,7/13 42 * /10 */5,*/3) # erreur: 42h
  #)
  (trigger
   (cron /5 */2,3,5,7/13 22 * /10 */5,*/3)
  )
  (trigger
   (cron /10 15 6 31 */2 2,3)
  )
 )
 (task batch2(taskgroup appli.batch)(mean ssh)(command /opt/bar.sh)
  (target back)
  (resource memory 768)
  (trigger(notice gobatch2))
  (trigger
   (cron 0 0 22 * * *) # à 22h en + de l'évenementiel
  )
 )
 (task batch3(taskgroup appli.batch)(mean local)
  #(command /tmp/foo)
  #(disabled)
  (command cat /etc/hosts)
  (target localhost)
  (trigger(cron 2/10 * * * * *))
  (param FOO BAR)
  (resource memory 103)
 )
 (task batch4(taskgroup appli.batch)(mean ssh)
  (target localhost)
  #(command cat /etc/hosts)
  (command /tmp/foo "$z %z %{=date:yyyy} %{z} %{=date:dd}" %!x %undef)
  (trigger(cron 1/10 * * * * *))
  (resource memory 104)
  (param tag batch4)
 )
 (task batch5(mean local)(taskgroup appli.batch)(disabled))

 # workflows
 (taskgroup appli.wf)
 (task wf1(taskgroup appli.wf)(mean workflow)
  (trigger(cron 1/10 * * * * *))
  (resource memory 104)
  (param tag wf1)
  (setenv setenv1 value1)
  (unsetenv unsetenv2)
  (start s1 s2 s4)
  (subtask s1(mean local)(command /bin/true)(onfinish(step 1)))
  (subtask s2(mean local)(command /bin/true)(onfinish(step 1)))
  (and 1(onready(step s3)))
  (subtask s3(mean local)(command /bin/true)(onfinish(step 3)))
  (subtask s4(mean local)(command /bin/true)(onsuccess(step s5))(onfailure(step 2)))
  (subtask s5(mean local)(command /bin/true)(onfinish(step 2)))
  (or 2(onready(step 3)))
  (and 3(onready(end)))
 )
 (task wf0(taskgroup appli.wf)(mean workflow)
  (subtask sw0(mean workflow)) # error: subworkflows are not supported
 )
 (task wf2(taskgroup appli.wf)(mean workflow)
  (trigger(cron 1/10 * * * * *))
  (resource memory 104)
  (start s1 s2 s4)
  (subtask s1(mean local)(command /bin/true)(onfinish(step 1)))
  (subtask s2(mean local)(command /bin/true)(onfinish(step 1)))
  (and 1(onready(step s3)))
  (subtask s3(mean local)(command /bin/true)(onfinish(step 3)))
  (subtask s4(mean local)(command /bin/false)(onsuccess(step s5))(onfailure(step 2)))
  (subtask s5(mean local)(command /bin/true)(onfinish(step 2)))
  (or 2(onready(step 3)))
  (and 3(onready(end(failure)(returncode 42))))
 )
 (task wf3(taskgroup appli.wf)(mean workflow)
  (subtask s0(mean local)(command /bin/true)(onfinish(step nonexistent)))
 )
 (task noticeposter(taskgroup appli.wf)(mean donothing)
   (trigger(cron 4/10 * * * * *))
   (onstart(postnotice foobar))
 )
 (task wf4(taskgroup appli.wf)(mean workflow)
  # workflow w/ a or step triggered by notice ^foobar
  # and a cron trigger that will fire too late
  (trigger(cron 1/10 * * * * *))
  (param file /etc/hosts)
  (start s1)
  (subtask s1(mean local)(command /bin/false)(onsuccess(step 1)))
  (ontrigger
    (cron 6/10 * * * * *(param file /dev/null)) # trigger with param
    (notice foobar(param file /tmp/data)) # several triggers per subscription
    (step 1) # actions
    (log(severity FATAL)"*** ontrigger!!! ***")
  )
  (or 1(onready(step s2)))
  (subtask s2(mean local)(command /bin/true %file)(onfinish(end))
   (trigger(cron * * * * * *)(notice foobar)) # warning: subtasks do not have triggers
  )
 )
 (task wf5(taskgroup appli.wf)(mean workflow)
  # same workflow but this time the cron trigger fires before notice
  (trigger(cron 1/10 * * * * *))
  (param file /etc/hosts)
  (start s1)
  (subtask s1(mean local)(command /bin/false)(onsuccess(step 1)))
  (ontrigger
    (cron 2/10 * * * * *(param file /dev/null))
    (notice foobar(param file /tmp/data))
    (step 1)
    (log(severity FATAL)"*** ontrigger!!! ***")
  )
  (or 1(onready(step s2)))
  (subtask s2(mean local)(command /bin/true %file)(onfinish(end)))
 )
 (task wf6(taskgroup appli.wf)(mean workflow)
  (trigger(cron 1/10 * * * * *))
  (param file /tmp/data)
  (start unzip backup)
  (subtask unzip(mean ssh)(target localhost)(command /bin/true %file)(onfinish(step 1)))
  (subtask backup(mean local)(command /bin/true %file)(onfinish(step 1)))
  (and 1(onready(step import_file)))
  (ontrigger(cron * 0 10 * * *(param file /dev/null))(step import_file))
  (subtask import_file(mean local)(command /bin/true %file)(onfinish(end(returncode 14))))
  (onfinish(log(severity FATAL)"*** onfinish!!! ***"))
 )
 (task wf7(taskgroup appli.wf)(mean workflow)
  #(trigger(cron 1/10 * * * * *))
  (param file /tmp/data)
  (requestform
    (field file)
  )
  (start dummy)
  (subtask dummy
    (target localhost)
    (command /bin/echo %file)
    (onfinish(step dummy2))
  )
  (subtask dummy2
    (target localhost)
    (command /bin/echo %file)
    (onfinish(end))
  )
 )

 # infra
 (host localhost(hostname localhost)(resource memory 128))
 (host back1(hostname back1.foo.fr)(resource memory 1024))
 (host back2(hostname back2.foo.fr)(resource memory 1024))
 (cluster back(hosts back1 back2)(balancing first))

 # log
 (log(level debug)(file "/tmp/qron-debug-%{=date:yyyyMMdd}.log")(unbuffered))
 (log(level info)(file "/tmp/qron-%{=date:yyyyMMdd}.log")(unbuffered))

 # global section
 (param globalparam foo)
 (maxtotaltaskinstances 8)
 (unsetenv LS_COLORS TERMCAP)
)
